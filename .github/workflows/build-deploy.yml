name: CD Pipeline
on:
    push:
        branches: [main]

jobs:
    build-push-image:
        runs-on: ubuntu-latest
        environment: production
        steps:
            - uses: actions/checkout@v3
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{secrets.DOCKERHUB_USERNAME}}
                  password: ${{secrets.DOCKERHUB_ACCESSTOKEN}}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Cache Docker layers
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-
            # Public environment variables need to be injected at build-time
            # https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables

            - name: Build and push
              uses: docker/build-push-action@v5
              with:
                  file: Dockerfile
                  push: true
                  tags: |
                      louisbenedictb/youmee:latest
                      louisbenedictb/youmee:${{github.sha}}
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,dest=/tmp/.buildx-cache-new
                  build-args: |
                      "NEXT_PUBLIC_S3_URL=${{ secrets.NEXT_PUBLIC_S3_URL }}"
                      "NEXT_PUBLIC_CF_URL=${{ secrets.NEXT_PUBLIC_CF_URL }}"
                      "NEXT_PUBLIC_API_BASEURL=api/${{ vars.APIVERSION }}"
                      "NEXT_PUBLIC_EMAIL_SENDER=${{ secrets.EMAIL_FROM }}"
                      "NEXT_PUBLIC_BASEURL=${{ vars.NEXT_PUBLIC_BASEURL }}"

            - name: Move cache
              run: |
                  rm -rf /tmp/.buildx-cache
                  mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    ### Deployment workflow ###
    deploy-aws:
        needs: [build-push-image]
        runs-on: ubuntu-latest
        environment: production
        defaults:
            run:
                shell: bash
                working-directory: ./__scripts__
        permissions:
            id-token: write
            contents: read

        steps:
            - uses: actions/checkout@v3
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{secrets.DOCKERHUB_USERNAME}}
                  password: ${{secrets.DOCKERHUB_ACCESSTOKEN}}

            # https://aws.amazon.com/blogs/security/use-iam-roles-to-connect-github-actions-to-actions-in-aws/
            - name: Login AWS
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: arn:aws:iam::623557680318:role/GitHubAction-AssumeRoleWithAction.
                  aws-region: ${{secrets.AWS_REGION}}

            - name: Lookup EC2 Instance State
              id: instance_status
              run: echo "$(./getEC2InstanceIDbyName.sh ${{secrets.EC2_INSTANCENAME}})" >> $GITHUB_OUTPUT

            - name: Run EC2 Instance if stopped
              if: steps.instance_status.outputs.INSTANCE_STATE == 'stopped'
              run: aws ec2 start-instances --instance-id ${{secrets.EC2_INSTANCE_ID}}

              # Wait for the instance to come online
            - name: Lookup EC2 Instance Public IP
              id: instance_public_ip
              run: echo "$(./awaitEC2Start.sh ${{secrets.EC2_INSTANCENAME}})" >> $GITHUB_OUTPUT

            - name: Setup production environment
              env:
                  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
                  DATABASE_URL: ${{ secrets.DATABASE_URL }}
                  AWS_REGION: ${{ secrets.AWS_REGION }}
                  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
                  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
              run: |
                  cd ..
                  cat <<EOF > .env
                  NODE_ENV=production
                  AWS_REGION="$AWS_REGION"
                  AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
                  AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
                  NEXTAUTH_SECRET="$NEXTAUTH_SECRET"
                  DATABASE_URL="$DATABASE_URL"
                  REDIS_HOST="redis-cache"
                  REDIS_PORT=6379
                  EOF

            - name: Copy Resources to Instance
              uses: appleboy/scp-action@v0.1.4
              with:
                  host: ${{ steps.instance_public_ip.outputs.INSTANCE_PUBLIC_IP }}
                  username: ${{ secrets.EC2_USERNAME }}
                  port: 22
                  key: ${{ secrets.GHA_EC2_SSH_ACCESSKEY }}
                  source: '.env,docker-compose.yaml,proxy,__scripts__/noDowntimeDeployment.sh,redis'
                  target: 'app'

            - name: Pull and Replace latest Image
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ steps.instance_public_ip.outputs.INSTANCE_PUBLIC_IP }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.GHA_EC2_SSH_ACCESSKEY }}
                  script: |
                      ./app/__scripts__/noDowntimeDeployment.sh ${{secrets.DOCKERHUB_USERNAME}}
