name: CI Pipeline

on:
    push:
        branches: [dev]
    pull_request:
        branches: [dev]

jobs:
    test:
        runs-on: ubuntu-latest
        environment: development
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3
            - uses: actions/cache@v2
              with:
                  path: |
                      node_modules
                  key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-npm-
            - uses: actions/cache@v3
              with:
                  path: ${{ github.workspace }}/.next/cache
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version-file: '.nvmrc'

            - name: Install Dependencies
              run: npm install

            - name: Run Lint
              run: npm run lint

            - name: Jest Unittests
              env:
                  NEXTAUTH_SECRET: ${{secrets.NEXTAUTH_SECRET}}
              run: npm run test:coverage

    docker-build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            # This is the a separate action that sets up buildx runner
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            # So now you can use Actions' own caching!
            - name: Cache Docker layers
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-
            # And make it available for the builds
            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: Dockerfile
                  push: false
                  tags: user/app:latest
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,dest=/tmp/.buildx-cache-new
            - name: Move cache
              run: |
                  rm -rf /tmp/.buildx-cache
                  mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    make_main_pull_request:
        name: Create PR Release to Main
        needs: docker-build
        runs-on: ubuntu-latest
        steps:
            - name: git checkout
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

            - name: create pull request
              id: open-pr
              uses: repo-sync/pull-request@v2
              with:
                  github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
                  destination_branch: ${{ github.event.repository.default_branch }}
                  pr_title: '[Automated] Merge ${{ github.ref_name }} into ${{ github.event.repository.default_branch }}'
                  pr_body: 'Automated Pull Request'

            - name: enable automerge
              if: steps.open-pr.outputs.pr_number != ''
              uses: peter-evans/enable-pull-request-automerge@v2
              with:
                  token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
                  pull-request-number: ${{ steps.open-pr.outputs.pr_number }}
                  merge-method: merge
